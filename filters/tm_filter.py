import numpy as np

from range_filter import RangeFilter


def median(a):
    """
        Helper function to calculate the median of a given list

        Parameters
        ----------
        a : array-like
            Sequence of values whose median has to be calculated
    """
    le = len(a)
    mid = le // 2
    a = sorted(a)
    return a[mid] if le & 1 else (a[mid] + a[mid - 1]) / 2


class TemporalMedianFilter:
    """
        TemporalMedianFilter(d)

        Define a temporal median filter to reduce noise in the scans generated by a LIDAR sensor.
        Takes a window size for calculating the median within that window size

        Parameters
        ----------
        d : int
            Number of previous scans to take for calculating median
    """
    def __init__(self, d=3):
        self.d = d
        self.prev = None

    def update(self, x, use_np=True, filter_range=False):
        """
            Filter values of a LIDAR scan by calculating median of previous D
            values for each i of the scan. Filtering is done

            Parameters
            ----------
            x : array_like
                Updates of a LIDAR sensor scan
            use_np : boolean
                     Toggle whether to use numpy operation or non-numpy
                     operation for calculating the medians
            filter_range : boolean
                           Toggle whether to filter the extreme values with
                           min, max of ranges

            Returns
            -------
            filtered scan : ndarray if use_np == True else list
                            Noise reduced LIDAR scan
        """
        if filter_range:
            rf = RangeFilter()
            x = rf.update(x)
        x = x[:]
        if use_np:
            if self.prev is None:
                self.prev = np.array([x])
            else:
                self.prev = np.append(self.prev, [x], axis=0)
            return np.median(self.prev[:-(self.d + 2): -1], axis=0)
        else:
            if self.prev is None:
                self.prev = []
            self.prev.append(x)
            zipped = zip(*self.prev)
            filtered = []
            for i in zipped:
                filtered.append(median(i[:-(self.d+2):-1]))
            return filtered
